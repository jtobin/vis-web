!!! 5
%html{lang: 'en'}
  %head
    %meta{charset: 'utf-8'}
    %title D3 Page Template
    %script{type: 'text/javascript', src: 'd3/d3.v3.js'}

  %body
    %div
    %p (click me)

:coffee
  ### EX 1
  data = [5, 10, 15, 20, 25]

  d3.select('body').selectAll('p')
      .data(data)
      .enter()
      .append('p')
      .text((d) -> "i can count up to " + d)
      .style('color', (d) -> if d > 15 then 'red' else 'black')
  ###

  ### EX 2
  inflate = (x) -> x * 5

  data = (Math.random() * 20 for j in [0..59])

  d3.select('body').selectAll('div')
      .data(data)
      .enter()
      .append('div')
      .attr('class', 'bar')
      .style('height', (d) -> (inflate d) + 'px')
  ###

  ### EX 3
  data = (j * 5 for j in [1..5])

  h = 50
  w = 500

  svg = d3.select('body')
            .append('svg')
            .attr('height', 2 * h)
            .attr('width',  w)

  circles = svg.selectAll('circle')
                 .data(data)
                 .enter()
                 .append('circle') 

  circles.attr('cx', (d, i) -> (i * 65) + 25)
         .attr('cy', h)
         .attr('r',  (d) -> d)  
         .attr('fill', 'yellow')
         .attr('stroke', 'orange')
         .attr('stroke-width', (d) -> d / 2)
  ###

  ### EX 4
  data = [  5, 10, 13, 19, 21, 25, 22, 18, 15, 20
         , 15, 12, 11, 13, 18, 17, 16, 18, 23, 25 
         ] 

  h           = 100
  w           = 500 
  bar_w       = 20
  bar_padding = 1 

  svg   = d3.select('body')
              .append('svg')
              .attr('height', h)
              .attr('weight', w)

  rects = svg.selectAll('rect')
              .data(data)
              .enter()
              .append('rect')

  rects.attr('x', (d, i) -> i * (w / data.length))
       .attr('y', (d) -> h - (d * 4))
       .attr('width',  w / data.length - bar_padding)
       .attr('height', (d) -> d * 4)
       .attr('fill', (d) -> "rgb(0, 0, " + (d * 10) + ")")

  svg.selectAll('text')
     .data(data)
     .enter()
     .append('text')
     .text((d) -> d)
     .attr('text-anchor', 'middle')
     .attr('x', (d, i) -> 
       i * (w / data.length) + 11)
     .attr('y', (d) -> h - (d * 4) + 14)
     .attr('font-family', 'sans-serif')
     .attr('font-size', '11px')
     .attr('fill', 'white')
  ###

  ###
  w = 500
  h = 300
  padding = 30
  x_range = Math.random() * 1000
  y_range = Math.random() * 1000

  data = ([ Math.floor(Math.random() * x_range), 
            Math.floor(Math.random() * y_range) ] for j in [1..50])

  xScale = d3.scale.linear()
              .domain([0, d3.max(data, (d) -> d[0])])
              .range([padding, w - padding])

  yScale = d3.scale.linear()
              .domain([0, d3.max(data, (d) -> d[1])])
              .range([h - padding, padding])

  rScale = d3.scale.linear()
              .domain([0, d3.max(data, (d) -> d[1])])
              .range([2, 5])

  xAxis  = d3.svg.axis()
              .scale(xScale)
              .orient('bottom')
              .ticks(5)

  yAxis  = d3.svg.axis()
              .scale(yScale)
              .orient('left')
              .ticks(5)

  svg = d3.select('body')
            .append('svg')
            .attr('height', h)
            .attr('width',  w)

  svg.selectAll('circle')
      .data(data)
      .enter()
      .append('circle')
      .attr('cx', (d) -> xScale(d[0]))
      .attr('cy', (d) -> yScale(d[1]))
      .attr('r',  (d) -> rScale(d[1]))

  svg.selectAll('text')
      .data(data)
      .enter()
      .append('text')
      .text((d) -> d[0] + ',' + d[1])
      .attr('x', (d) -> xScale(d[0]))
      .attr('y', (d) -> yScale(d[1]))
      .attr('font-family', 'sans-serif')
      .attr('font-size', '11px')
      .attr('fill', 'red')

  svg.append('g')
      .attr('class', 'axis')
      .attr('transform', 'translate(0, ' + (h - padding) + ')')
      .call(xAxis)

  svg.append('g')
      .attr('class', 'axis')
      .attr('transform', 'translate(' + padding + ',0)')
      .call(yAxis)
  ###

  data = [  5, 10, 13, 19, 21, 25, 22, 18, 15, 20
         , 15, 12, 11, 13, 18, 17, 16, 18, 23, 25 
         ] 

  w           = 600 
  h           = 250
  bar_w       = 20
  bar_padding = 1 

  xScale = d3.scale.ordinal()
               .domain(d3.range(data.length))
               .rangeRoundBands([0, w], 0.05)

  yScale = d3.scale.linear()
              .domain([0, d3.max(data)])
              .range([0, h])

  svg   = d3.select('body')
              .append('svg')
              .attr('height', h)
              .attr('width', w)

  rects = svg.selectAll('rect')
              .data(data)
              .enter()
              .append('rect')

  rects.attr('x', (d, i) -> xScale(i))
       .attr('y', (d) -> h - yScale(d))
       .attr('width',  xScale.rangeBand())
       .attr('height', (d) -> yScale(d))
       .attr('fill', (d) -> "rgb(0, 0, " + (d * 10) + ")")

  svg.selectAll('text')
     .data(data)
     .enter()
     .append('text')
     .text((d) -> d)
     .attr('text-anchor', 'middle')
     .attr('x', (d, i) -> 
       xScale(i) + xScale.rangeBand() / 2)
     .attr('y', (d) -> h - yScale(d) + 14)
     .attr('font-family', 'sans-serif')
     .attr('font-size', '11px')
     .attr('fill', 'white')

  d3.select('p')
      .on('click', () -> 

            data = [ 11, 12, 15, 20, 18, 17, 16, 18, 23, 25
                   ,  5, 10, 13, 19, 21, 25, 22, 18, 15, 13
                   ]

            svg.selectAll('rect')
                 .data(data)
                 .transition()
                 .delay((d, i) -> i * 100)
                 .duration(500)
                 .ease('elastic')
                 .attr('y', (d) -> h - yScale(d))
                 .attr('height', (d) -> yScale(d))
                 .attr('fill', (d) -> "rgb(0, 0, " + (d * 10) + ")")

            svg.selectAll('text')
                 .data(data)
                 .text((d) -> d)
                 .attr('x', (d, i) -> xScale(i) + xScale.rangeBand() / 2)
                 .attr('y', (d) -> h - yScale(d) + 14)
  )

   

:css
  .bar { 
    display: inline-block;
    width: 20px;
    height: 75px;
    background-color: teal;
    margin-right: 2px;
  }

  .axis path,
  .axis line {
    fill : none;
    stroke: black;
    shape-rendering: crispEdges;
  }

  .axis text {
    font-family: sans-serif;
    font-size: 11px;
  }


